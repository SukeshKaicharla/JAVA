# Variable and Methods
Small info abt Attributes and Methods

 University Class:
Attributes(VARIABLES)
1. Name: The name of the university.
2. Location: The physical location where the university is situated.
3. Number of Students: The total number of students enrolled in the university.
4. Faculty Members: The total count of faculty members working in the university.
5. Courses Offered: A list of courses offered by the university.

Behaviors(METHODS)
1. Enroll Student: Method to enroll a student in the university.
2. Hire Faculty: Method to hire a faculty member.
3. Offer Course: Method to add a new course to the university's curriculum.
4. Organize Events: Method to organize events such as seminars, workshops, etc.

Bank Class:
Attributes
1. Name: The name of the bank.
2. Location: The physical location of the bank branch.
3. Total Assets: The total value of assets held by the bank.
4. Number of Accounts: The total number of accounts held by the bank.
5. Interest Rate: The interest rate offered by the bank on savings or loan accounts.

Behaviors
1. Open Account: Method to open a new account for a customer.
2. Close Account: Method to close an existing account.
3. Process Transaction: Method to process deposits, withdrawals, or transfers.
4. Calculate Interest: Method to calculate interest for savings accounts.

Theatre Class:
Attributes
1. Name: The name of the theatre.
2. Location: The physical location of the theatre.
3. Seating Capacity: The total number of seats available in the theatre.
4. Show Timings: The schedule of shows (e.g., movies, plays) at the theatre.
5. Ticket Prices: The prices of tickets for different types of shows.

Behaviors
1. Sell Tickets: Method to sell tickets for a show.
2. Reserve Seats: Method to reserve seats for customers.
3. Display Schedule: Method to display the schedule of shows.
4. Cancel Show: Method to cancel a scheduled show.

 Radio Class:
Attributes
1. Name: The name of the radio station.
2. Frequency: The frequency at which the radio station broadcasts.
3. Programs: The list of programs aired by the radio station.
4. Listenership: The number of listeners tuned in to the radio station.

Behaviors
1. Broadcast Program: Method to broadcast a program.
2. Change Frequency: Method to change the frequency of the radio station.
3. Advertise: Method to advertise products or services on the radio.
4. Collect Feedback: Method to collect feedback from listeners.

#JAVA and its Architecture

Java works through a combination of its language features, virtual machine architecture, and extensive library support.

1. Writing Code: You write Java code using a text editor or a specialized program like IntelliJ IDEA.
  
2. Compilation: Your Java code gets translated into a special kind of code called "bytecode."
  
3. Java Virtual Machine (JVM): This bytecode can run on any device with a JVM. It's like a translator that turns bytecode into instructions your computer understands.
  
4. Platform Independence: Because of the JVM, Java programs can run on different types of devices without needing to be rewritten.
  
5. Java API: Java comes with a bunch of pre-made tools and functions called the Java API. You can use these to do lots of different things without starting from scratch.
  
6. Execution: Once translated by the JVM, your code runs on the device just like any other program.

#POSSIBILITIES OF MAIN METHOD

C:\Users\SUKESH\Desktop\Programming\Ques\Core java>javac java1.java
java1.java:30: error: <identifier> expected
      <ins>**static public void main(String[])**</ins> 
      ---
                                        ^
1 error

<


C:\Users\SUKESH\Desktop\Programming\Ques\Core java>javac java1.java
java1.java:30: error: invalid method declaration; return type required
       <ins>**static public main(String[]args)**</ins>
       ---
                      ^
1 error



C:\Users\SUKESH\Desktop\Programming\Ques\Core java>javac java1.java
java1.java:30: error: <identifier> expected
       <ins>**static public void(String[]args)**</ins>
       ---
                          ^
1 error



C:\Users\SUKESH\Desktop\Programming\Ques\Core java>javac java1.java
java1.java:30: error: <identifier> expected
        <ins>**public static void(String[]args)**<ins>
        ---
                           ^
1 error



<ins>**public static void main(String[]args)**</ins>
---
C:\Users\SUKESH\Desktop\Programming\Ques\Core java>javac java1.java

C:\Users\SUKESH\Desktop\Programming\Ques\Core java>java a
HELLOO



<ins>**static public void main(String[]args)**</ins>
---
C:\Users\SUKESH\Desktop\Programming\Ques\Core java>javac java1.java

C:\Users\SUKESH\Desktop\Programming\Ques\Core java>java a
HELLOO
C:\Users\SUKESH\Desktop\



1)
  float r=2.5f % 2; //0.5 --commented ----> how is this 0.5 comes as result?

float r=2.5f / 2; //1.25

The `%` operator computes the remainder when dividing, resulting in `0.5` for `2.5f % 2`. However, the `/` operator performs division, yielding `1.25` for `2.5f / 2`.

2)
23 ==> 2+3=5
54 ==> 5+4=9
33 ==> 3+3=9
19 ==> 1+9=10=1+0 // no need for this
//55,65 - no need

int r=14; //use only literals  (hardcoded values)


import java.util.Scanner;

public class SumOfDigits {
    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        int size = obj.nextInt();
        int[] a = new int[size];
        for (int i = 0; i < size; i++) {
            System.out.print("Enter number " + (i + 1) + ": ");
            a[i] = obj.nextInt();
        }
        for (int n : a) {
            int d1 = n / 10;
            int d2 = n % 10;
            int sum = d1 + d2;
            System.out.println("Sum of the digits of " + n + " -> " + d1 + " + " + d2 + " -> " + sum);
        }
    }
}



3)
Logical operators in programming are used to perform logical operations on boolean values (true or false). These operators allow you to combine or modify boolean values and expressions to make decisions or control the flow of your program. In Java, there are three main logical operators: AND (`&&`), OR (`||`), and NOT (`!`). Let's explore each of them:

1. **AND Operator (`&&`)**:
   - The AND operator returns `true` if both of its operands are `true`, otherwise, it returns `false`.
   - Syntax: `operand1 && operand2`
   - Example:
     ```java
     boolean x = true;
     boolean y = false;
     boolean result = x && y; // result is false
     ```

2. **OR Operator (`||`)**:
   - The OR operator returns `true` if at least one of its operands is `true`, otherwise, it returns `false`.
   - Syntax: `operand1 || operand2`
   - Example:
     ```java
     boolean x = true;
     boolean y = false;
     boolean result = x || y; // result is true
     ```

3. **NOT Operator (`!`)**:
   - The NOT operator is a unary operator, which means it operates on a single operand.
   - The NOT operator negates the boolean value of its operand. If the operand is `true`, the result is `false`, and vice versa.
   - Syntax: `!operand`
   - Example:
     ```java
     boolean x = true;
     boolean result = !x; // result is false
     ```

These logical operators can be combined and used in complex expressions to make decisions or control the flow of your program. They are commonly used in conditional statements (`if`, `else`, `while`, `for`) and expressions where boolean logic is required. Understanding and using logical operators effectively is essential for writing clear and concise code in Java.



Nested If program
---

import java.util.Scanner;

public class Number
{
    public static void main(String[] args)
    {
        Scanner obj = new Scanner(System.in);
        int number = obj.nextInt();
        
        if (number >= 0) 
       {
            if (number == 0) 
             {
                System.out.println("The number is zero.");
             }
             else 
            {
                System.out.println("The number is positive.");
             }
       }
      else 
       {
            System.out.println("The number is negative.");
        }
     }
}


Task 1:
=======

int i=90;
for(;i>100;i++){}

O/P:Nothing

int i=90;
for(;i>100;i--){}

O/P:Nothing


int i=90;
for(; ;i++){}

O/P:Infinite


int i=90;
for(;i<100;i++){}

O/P:90-99


int i=90;
for(;i<100;i+=2){}

O/P:90 92 94 94 96 98


#   task2 : int i=23 ==> 2+3=>5 int i=33 ==> 3+3=>6

    import java.util.Scanner;
    public class A {
    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        int num = obj.nextInt();
        while (num > 9) {
            int sum = 0;
            while (num != 0) {
                sum += num % 10;   
                num /= 10; 
            }
            num = sum;
        }

        System.out.println("The reduced sum of digits is: " + num);
    }
}


